      //---CODE OPTIMIZERS---//
    //These are constants which equal pre-determined functions.
    //The current order is necesary, otherwise stuff is not initialized properly. This might mean I'm not coding properly. 

  //Spreadsheet
const ss = SpreadsheetApp.getActiveSpreadsheet();
const homework_sheet = ss.getSheetByName("Tareas");
Logger.log("Sheet set");
  //Meaningful Numbers
const last_column = homework_sheet.getDataRange().getLastColumn();
const last_row = homework_sheet.getDataRange().getLastRow();
Logger.log("Ranges set. Column: /%s/, Row: /%s/",last_column,last_row);
  //Column locators
const col_color_code = locateTitleColumn("Color Code"); //this became obsolete due to the setHomeworkFormat rework.
const col_type    = locateTitleColumn("Tipo");
const col_status  = locateTitleColumn("Estado");
const col_sent    = locateTitleColumn("Entregado");
const col_deadline= locateTitleColumn("Plazo");
const col_end     = locateTitleColumn("End") - 1; //Delimits a range, and needs to be 1 smaller. Changed here for eficiency. 
Logger.log("Titles set: /%s/, /%s/, /%s/, /%s/, /%s/, /%s/",col_color_code,col_type,col_status,col_sent,col_deadline,col_end);
  //Other data
const current_date = currentDate();
const format = getAllFormats();

Logger.log("---FINISHED CONST SET---");
      //---FUNCTIONS START HERE---//

function doAbsolutelyNothing(){}

  //Returns all values from the spreadsheet.
function sheetValues(){
  //this is janky, but just using the return messed stuff up.
  var sheet_values = ss.getDataRange().getValues();
  return sheet_values;
}

  //Returns the number of column that has the specified title.
function locateTitleColumn(title) {
  //For all columns, 
  for (let current_column = 1; current_column < last_column; current_column++) {
    if (title == homework_sheet.getRange(1, current_column).getValues()) {
      return current_column;
} } }

  //Returns the A1 notation of a cell with specific data in a set column
function locateCellContent(column, content){
  var row = 0;
  for (const data of getColumnData(column))
  {
    row++;
    if (data == content)
    {
      return asLetter(column) + row;
} } }

  //Returns all data from a specific row and column respectively.
  //They may be a bit more efficient than their counterparts.
function getRowData(number){
  var row_data = [];
    //On the sheet, get, as string, the values from a range that starts on the top, and goes to the last column with data.
  row = homework_sheet.getRange(number, 1, 1, last_column).getValues();
  return row_data;

}

function getColumnData(number){
  var column_data = [];
    //From the sheet get a string with values of a range that starts on the leftmost cell, and goes to the last row with data.
  column_data = homework_sheet.getRange(1, number, last_row, 1).getValues();
  return column_data;

}
  //Returns the data from a specific cell. Can be specified to return a string.
function getCellData(row, column){
  return homework_sheet.getRange(row, column).getValues();
}

  //Returns the date in the self-made string format of 'month'/'day', this way it can be somewhat compared.
function currentDate(){
  const day = new Date().getDate();
    //For some reason month starts from 0, not 1
  const month = new Date().getMonth() + 1;
  return month + "/" + day;
}

function getCellFormat(row, column){
  
  let format = [];
  let cell = homework_sheet.getRange(row, column);

  format[0] = cell.getFontColor();
  format[1] = cell.getFontSize();
  format[2] = cell.getFontFamily();
  format[3] = cell.getFontLine();
  format[4] = cell.getFontWeight();
  format[5] = cell.getFontStyle();
  format[6] = cell.getBackground();

  return format;
}

    //Returns the entirety of the color code, as an indexed array
function getAllFormats() {
    //Declaration of cell_format as an array.
  let cell_format = [];
    //Row by row, read the cell format of the column color code
  for (let row = 1; row < last_row; row++)
  {
    cell_format [row] = getCellFormat(row, col_color_code);
  }
  return cell_format;
}

function setCellsFormat(row, column, row_amount, column_amount, format = [7]){
  
  let cells = homework_sheet.getRange(row, column, row_amount, column_amount);

  cells.setFontColor(format[0]);
  cells.setFontSize(format[1]);
  cells.setFontFamily(format[2]);
  cells.setFontLine(format[3]);
  cells.setFontWeight(format[4]);
  cells.setFontStyle(format[5]);
  cells.setBackground(format[6]);
}

function setRowFormat(row, end, format = [7])
{
  setCellsFormat(row, 1, 1, end, format);
}
