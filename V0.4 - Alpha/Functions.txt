function doAbsolutelyNothing(){}

  //Returns all values from the spreadsheet.
function sheetValues(){
  var sheet_values = SpreadsheetApp.getActiveSheet().getDataRange().getValues();
  return sheet_values;
}

  //Returns the sheet itself. Whatever this means, it's needed for some functions.
function sheet(){
    return SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];
}

  //Returns the number of column that has the specified title.
function locateTitleColumn(title)
{
  var current_column = 0;

  for (current_column = 1; current_column < sheet().getLastRow(); current_column++)
  {
    if (title == sheet().getRange(1, current_column).getValues().toString())
    {
      return current_column;
    }
  }
}
  //Returns all data from a specific row. It is absurdly inefficient.
function dataFromRow(row_number)
{
  var row_data = [];
  var current_column = 0;

  for (current_column = 1; current_column < sheet().getLastRow(); current_column++)
  {
    row_data[current_column] = sheet().getRange(current_column,row_number).getValues().toString();
  }
  return row_data;
}

  //Return all values from a specific column
function dataFromColumn(number){
  //The column where data will be stored, and a counter to properly occupy different spaces
  var column = [];
  var counter = 0;
  number--;
  //for every row of the sheet, I write the value on the specified column into the vector
  sheetValues().forEach( function(row_pos)
  {
    column[counter] = row_pos[number];
        //Flag from when this sorta broke
      // Logger.log("Into the vector /" + counter + "/ from row_pos /" + number + "/, /"+ row_pos[number] +"/ was written.");
    counter++;
  });
  return column;
}

  //Returns the data from a specific cell. Can be specified to return a string.
function dataFromCell(cell, asString){
  if (asString == "yes")
  {
    return sheet().getRange(cell).getValues().toString();
  } else { return sheet().getRange(cell).getValues(); }
}

  //Returns the date in the self-made string format of 'month'/'day', this way it can somehow be compared without issues.
function currentDate(){
  day = new Date().getDate();
  month = new Date().getMonth() + 1;
  return month + "/" + day;
}

  //Simple comparator that returns bigger value, there should be a better way to do it.
function getBigger(a, b)
{
  if (a > b)
  {
    return a;
  } else if (b > a)
  {
    return b;
  } else return 0;
}

  //Turns out the colums requiring letters in A1 notation will give me a headache, so here's a bruteforce for pre-solving it:
function asLetter(number){
  switch(number)
  {
    case 1:
      return "A";
    case 2:
      return "B";
    case 3:
      return "C";
    case 4:
      return "D";
    case 5:
      return "E";
    case 6:
      return "F";
    case 7:
      return "G";
    case 8:
      return "H";
    case 9:
      return "I";
    case 10:
      return "J";
    case 11:
      return "K";
    case 12:
      return "L";
    case 13:
      return "M";
    case 14:
      return "N";
    case 15:
      return "O";
    case 16:
      return "P";
    case 17:
      return "Q";
    case 18:
      return "R";
    case 19:
      return "S";
    case 20:
      return "T";
    case 21:
      return "U";
    case 22:
      return "V";
    case 23:
      return "W";
    case 24:
      return "X";
    case 25:
      return "Y";
    case 26:
      return "Z";
  }
}

function getCellFormat(row, column){
  
  var format = [];

  format[0] = sheet().getRange(row, column).getFontColor();
  format[1] = sheet().getRange(row, column).getFontSize();
  format[2] = sheet().getRange(row, column).getFontFamily();
  format[3] = sheet().getRange(row, column).getFontLine();
  format[4] = sheet().getRange(row, column).getFontWeight();
  format[5] = sheet().getRange(row, column).getFontStyle();
  format[6] = sheet().getRange(row, column).getBackground();

  return format;
}

function setCellsFormat(row, column, row_amount, column_amount, format = [7]){
  sheet().getRange(row, column, row_amount, column_amount).setFontColor(format[0]);
  sheet().getRange(row, column, row_amount, column_amount).setFontSize(format[1]);
  sheet().getRange(row, column, row_amount, column_amount).setFontFamily(format[2]);
  sheet().getRange(row, column, row_amount, column_amount).setFontLine(format[3]);
  sheet().getRange(row, column, row_amount, column_amount).setFontWeight(format[4]);
  sheet().getRange(row, column, row_amount, column_amount).setFontStyle(format[5]);
  sheet().getRange(row, column, row_amount, column_amount).setBackground(format[6]);
}

function setHomeworkFormat(row, format_y, format_x){
  setCellsFormat(row, 1, 1, 8, getCellFormat(format_y, format_x))
}
